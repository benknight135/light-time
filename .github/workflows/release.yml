name: Release

on:
  workflow_dispatch:
    inputs:
        level:
          type: choice
          description: Release type
          options: 
          - patch
          - minor
          - major

jobs:
  versioning:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Get latest released version
      - uses: oprypin/find-latest-tag@v1
        with:
          repository: benknight135/sundial-time  # The repository to scan.
          releases-only: true  # All relevant tags have a GitHub release for them.
        id: latest-tag  # The step ID to refer to later.
      # Generate new release version
      - name: Generate new version
        uses: actions-ecosystem/action-bump-semver@v1
        id: bump-version
        with:
          current_version: ${{ steps.latest-tag.outputs.tag }}
          level: ${{ github.event.inputs.level }}
      # Add generated version to VERSION file
      # remove 'v' character from version string
      - name: Add to Version file
        shell: bash
        run: |
          PROJECT_VERSION=${{ steps.bump-version.outputs.new_version }}
          PROJECT_VERSION=${PROJECT_VERSION:1}
          echo "$PROJECT_VERSION" > version.txt
      # Upload version file for use in other jobs
      - name: Archive version file
        uses: actions/upload-artifact@v2
        with:
          name: version-file-${{ github.sha }}
          path: version.txt

  deploy:
    needs: [versioning]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      # Setup Node JS
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          registry-url: 'https://registry.npmjs.org'
      # Get project version
      - name: Download version file artifact
        uses: actions/download-artifact@v2
        with:
          name: version-file-${{ github.sha }}
          path: versioning
      - name: Get project version
        shell: bash
        run: |
          PROJECT_VERSION=$(cat versioning/version.txt)
          echo "$PROJECT_VERSION" > version.txt
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV
      # Update version of packages to match project version
      - name: Update package versions
        shell: bash
        run: node updateversions.js $PROJECT_VERSION
        env:
          PROJECT_VERSION: ${{ env.PROJECT_VERSION }}
      # Install packages
      - name: Install packages
        shell: bash
        run: npm install
      # Run tests
      - name: Test
        run: npm test
      # Create GitHub release
      - name: GitHub release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          body_path: release.md
          tag_name: v${{ env.PROJECT_VERSION }}
      # Publish npm packages
      - name: Publish package (sundialtime)
        shell: bash
        working-directory: ./sundialtime
        run: |
          npm ci
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish package (sundialtimeweb)
        shell: bash
        working-directory: ./sundialtimeweb
        run: |
          npm ci
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      # Get git variables
      - name: Get commit variables
        id: commit-vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      # Merge main into production
      - name: Merge main -> prod
        uses: devmasx/merge-branch@master
        with:
          type: now
          target_branch: prod
          github_token: ${{ github.token }}
          message: merged ${{ steps.commit-vars.outputs.sha_short }}
      # Merge production back to main
      - name: Merge prod -> main
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: prod
          target_branch: main
          github_token: ${{ github.token }}
          message: merged ${{ steps.commit-vars.outputs.sha_short }}

  deploy-heroku:
    needs: [ deploy ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      # Get project version
      - name: Download version file artifact
        uses: actions/download-artifact@v2
        with:
          name: version-file-${{ github.sha }}
          path: versioning
      - name: Get project version
        shell: bash
        run: |
          PROJECT_VERSION=$(cat versioning/version.txt)
          echo "$PROJECT_VERSION" > version.txt
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV
      # Update version of packages to match project version
      - name: Update package versions
        shell: bash
        run: node updateversions.js $PROJECT_VERSION
        env:
          PROJECT_VERSION: ${{ env.PROJECT_VERSION }}
      # Deploy to heroku
      - uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "sundialtime"
          heroku_email: "benknight135@gmail.com"
          appdir: "sundialtimeweb"
        env:
          HD_PROJECT_VERSION: ${{ env.PROJECT_VERSION }}
          
  cleanup:
    needs: [ deploy, deploy-heroku]
    runs-on: ubuntu-latest

    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: version-file-${{ github.sha }}
